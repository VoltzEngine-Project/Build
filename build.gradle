buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
      classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
      //allows ability to get things from the git log.
      classpath 'org.ajoberstar:gradle-git:1.3.2'
      classpath 'org.ajoberstar:grgit:1.4.1'
      //classpath "se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.49-SNAPSHOT"
    }
}

plugins {
  //Applies the Build scan plugin so i can upload issues easily and link to gradle devs
  //id 'com.gradle.build-scan' version '1.4'
  //applies CurseGradle plugin for uploading to CurseForge
  id "com.matthewprenger.cursegradle" version "1.0.9"
  id 'net.saliman.cobertura' version '2.2.5'
  id 'com.github.kt3k.coveralls' version '2.0.1'
  //id "com.github.johnrengelman.shadow" version "1.2.2"
  id "net.franz-becker.gradle-lombok" version "1.3"
  id 'com.jfrog.bintray' version '1.1'
  //Applies the changelog plugin
  id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.50"
}

apply from: "./Engine/engine.properties"
apply from: 'https://raw.githubusercontent.com/BuiltBrokenModding/BuiltBrokenScripts/1.12.2/index/index.gradle'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'
apply from: 'https://raw.githubusercontent.com/BuiltBrokenModding/BuiltBrokenScripts/1.12.2/scripts/forge/deps.gradle'
//apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'

minecraft {
    replaceIn "References.java"
    replaceIn "com/builtbroken/mc/core/deps/DepDownloader.java"
    replace "@bbm_url@", bbm_url
    replace "@CL@", coding_lib
    replace "@CL-name@", CL_name
    replace "@CL_maj@", CL_major
    replace "@CL_min@", CL_minor
    replace "@CL_rev@", CL_revis
    replace "@CL_bu@", CL_build
}

def currentJvm = org.gradle.internal.jvm.Jvm.current()
//println "Current Java version = " + currentJvm

sourceCompatibility = 1.8
targetCompatibility = 1.8

task clearSrc{
  mustRunAfter 'clean'
  delete fileTree(dir: 'src' , include: '**/*')
}

task copyLibs{
    mustRunAfter 'clean'
    mustRunAfter 'clearSrc'
  
    copy {       
        from fileTree('API/src')
        from fileTree('CodeGenerator/src')
        from fileTree('Engine/src')
        from fileTree('Lib-Access/src')
        //from fileTree('ModFlags/src')
        //from fileTree('ModCompat/src')
        from fileTree('Prefabs/src')
        // from fileTree('Minecraft-1.7/src')
        into 'src'
        include '**/*'
    }
}

tasks.downloadClient.dependsOn clearSrc, copyLibs

println project.startGitRev

lombok {
    // optional: values below are the defaults
    version = "1.16.4"
    sha256 = "3ca225ce3917eac8bf4b7d2186845df4e70dcdede356dca8537b6d78a535c91e"
}

task deployCurse {
    dependsOn 'curseforge227048'
}

import org.ajoberstar.grgit.*

def gitHash = 'unknown'
if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

//task curseTest {
//  if ( grgit.log().find ) { it.fullMessage.contains("[deploy]") {
//  curseTest.dependsOn deployCurse
//  }
//}
//}
//tasks.build.dependsOn tasks.curseforge

task copyTmpChangelog(type: Copy) {
  from "Engine/engine.properties"
  into "output"
  rename { String fileName ->
    fileName.replace("engine.properties", "gradle.properties")
  }
}

jar {
     manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": currentJvm,
            "Implementation-Title": archivesBaseName,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash,
            "FMLCorePlugin": coremod,
            "FMLCorePluginContainsFMLMod": "true",
            "FMLAT": "VE_at.cfg")
}

deobfJar {
     manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": currentJvm,
            "Implementation-Title": archivesBaseName,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash,
            "FMLCorePlugin": coremod,
            "FMLCorePluginContainsFMLMod": "true",
            "FMLAT": "VE_at.cfg")
}

sourcesJar {
     manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": currentJvm,
            "Implementation-Title": archivesBaseName,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash,
            "FMLCorePlugin": coremod,
            "FMLCorePluginContainsFMLMod": "true",
            "FMLAT": "VE_at.cfg")
}

/*dependencies {
  compile name: 'CoFHLib', version: "${cofhlib_version}", ext: 'jar'
	compile name: 'CoFHCore', version: "${cofhcore_version}", ext: 'jar'
	compile name: 'RedstoneArsenal', version: "${rars_version}", ext: 'jar'
	compile name: 'ThermalExpansion', version: "${texpansion_version}", ext: 'jar'
	compile name: 'ThermalFoundation', version: "${tfoundation_version}", ext: 'jar'

}*/

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

/*buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}*/

task templetesZip (type: Zip) {
    if (project.getProperty("bambooshortPlanName") == "BBM-Dev") classifier = "dev-templetes"
    else classifier = "templetes"
    from 'src/templates/java'
    include "com/builtbroken/mc/codegen/**"
    destinationDir = file 'output'
    mustRunAfter "jar"
}

task apiZip (type: Jar) {
    if (project.getProperty("bambooshortPlanName") == "BBM-Dev") classifier = "dev-api"
    else classifier = "api"
    from sourceSets*.allSource
    include "com/builtbroken/mc/api/**"
    destinationDir = file 'output'
    mustRunAfter "jar"
}

/*publishing {
    publications {
        mavenJava(MavenPublication)
        {
            artifact apiZip
        }
    }
}*/

tasks.build.dependsOn apiZip, templetesZip, copyTmpChangelog